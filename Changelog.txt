Refactored large amount of the spellcasting system
Replaced some of the targetting variables with a TVariant
Replaced OnMoveCompleted logic with a Visitor
Fixed some spells in blueprints to rely only on the new TVariant rather than TargetData which is still filled by AI but then it fills the Variant
Removed TargetDataHandle (but added functionality to convert our varaint into a TargetDataHandle for the ability system which uses it to apply gameplay effects)
Refactored some movement logic to complement the spell casting refactor
Modified death logic to work with target variant.
Will perform more tests on spellcast system before next refactoring updates
Refactored FireStorm spell and Cure Spell and fixed handling both actor and location targetting
TODO: Refactor rest of spells?
--

TOOD: Move logic of unit to derive from pawn class and add separate component logic
TODO: Document skill actionbar stuff some more
TODO: Clamp Vitals
TODO: Add more combat room testing options
TODO: Add 3D widgets to some of the FVector properties
TODO: Fix Health Overflow (when healing) or when equipping weapons
TODO: Fix multithreading issues when moving to a new level
TODO: Set enemy unselectable by click trace initially (works when they get out of vision)
TODO: Set interactables unselectable by click trace unless we've overlapped them in the visionSphere once
TODO: Fix Attack Moves and Chasing
TODO: Fix spell casting attempt after another spell finishes (fix with queue system)
TODO: Fix Storage Inventory and Drag and Drop for slots
TODO: Finish Testing Level
TODO: Multiplayer AND LOTSA MULTIPLAYER REFACTORING
TODO: Tank Game 
TODO: Puzzles
TODO: Implement spell description parsing
TODO: Add spell requirements (overloads and combos)
TODO: Implement firebase to record some data?
TODO: Manual enemy debug controls to test some combat cases
TODO: Limitation of the targetting system - AI targetting can't target units with AOE spells?

Improvement TODOs:
Unify target inside blackboard with target data target? (not possible since we use that one for ai stuff, and the targetData everywhere else)
How to handle attack move queueing? (using patrol in which case we need to stop the tree once we move to the destination however we don't want to do this when not queueing)

