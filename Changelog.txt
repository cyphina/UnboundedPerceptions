Migrated necessary assets into new UE4 project
Fixed some actor properties in the test level
PartyScreen wasn't bugged but UE4 didn't like it when there was a none object added to the list view so had to refactor and add a separate
clear selection button outside of list.
Add textures to always be included in packaging to get hardware cursor images
Removed some old building construction blueprint stuff.  Kept some of it around because I can reimplement it someday for some tower creation spells 
or something of the sort.
Added a cheat command for adding quests
Fixed problems with TutorialQuest
Hotreloaded struct type mismatch error fix (QuestMap was referring to wrong blueprint too)
Fixed HeroRefreshSpell cheats
Removed CPC reference from GhostBuilding (possible circular blueprint reference causing search all blueprints to lag and caught in packaging)
Swapped navigation filter on party changer which uses GetRandomNavigablePointInRadius to one that doesn't require an AAIController on the querier
Fixed interactables having turning problems if they are already in range (rotation mechanism fine but the scene locations are off)
Fixed FadeOn inversion not working in MyGameState
Moved Textbox HUD to front
Fixed bugs to migrate to version 4.24
Changed NextLevelWidget component to Screen and used lookat rotation
Toggling the level visibility seemed to fix some bugs with the navigation.  Setting tile pool size to not be fixed helped remove these problems since we do not use level streaming.
Fixed some level design things in the test levels
Increased possible spawn radius when changing party in wardrobe
Renamed unit patrolling and NPC patrolling tree
Seperated patrolling logic from target finding
Added move request IDs to MoveFinished listeners
Sprinkling more comments over C++ and Blueprints
Added final and const modifiers to several spots
Aligned dialogbox UI
Fixed missing link in paged inventory view BP enabling turning page backwards
Fixed NPC loading temporary data in LoadNPCData between levels
Added logic for handling dialog box closing due to NPC events to NPCs rather than having it in dialogbox
Added parallelism to vision updates
Removed comments about unnecessary invisibility checks and refactored invisibility system
Added some checks to item equipping and using
Fixed case of casting spell that targets interactable still triggering spell casting repositioning mechanism
Fixed targetting logic causing unlocking doors and targetting interactables to crash and added some comments on this
Fixed wrong dialogsource setting on eventbarricade
Fixed reverse page flip bindings in heroinventory
Added more checks OnFinishedMoving to ensure we don't perform our actions on null cases.
Added some fallback cases when moving towards a static interactable and now the unit moving towards the interactable will move completely on the interactablelocation
Fixed some test level lighting and text component discriptions
Item pickup quests can now be created without specifying the NPC name as an additional name (implying we return the items back to the original NPC). 
Fixed quest system so we can complete test quest again in the test level.  This involved manipulating the item pickup trigger.
Fixed problems when stopping during talking to an NPC (by pressing stop and prevented moving which was somehow renabled).  
Changed some spell effects (cure) to spawn as a child emitter
Removed double on drop event for mainhud and ingame hud.
Updates inventory when dropping items
Removed equip drag class
Fixed item drag and drop for equipment slots using only item drags (remembered to capture event for inventory to equipmenu drops).
Added help messages for spellbook events asnd modified spellbook look.
Created base class for ally blueprints and set ally to have correct AIController
Fixed wardrobe normals
Fixed Black Mirror Ritual Buff
Fixed chatbox not clearing after removing of ML system
Fix null projectile on rangedenemy
TODO: Change dialog system to use one chatbox to better suit the RTS?  Then I can use the current dialog boxes to be used during cutscenes possibly.
TODO: Threaded item pickup check
Added a damage component to move code for dealing damage to a component which can be attached to sources besides units.  This code also decouples damage from abilities.
Fixed healingDealt and healingReceived being mixed up within damage calculation
Removed extra absolute damage type check in ApplyEffects (there's already one in ReceiveEffects).
Commented out useless code in LoadInteractableData()
Retargetted various yin animation clips, combined them in a montage, and added notifies to animation clips to trigger attack damage.
Finish setting up delegate in animation for attack damage triggering
Added Damage Handling for Ward type Units
Decoupled code from hero and interactable get location
Cleaned up a lot of map saving code and optimized that code to use sets with custom KeyFuncs 
Fixed some warnings given from moving the transform of a non moveable object in map save load
Added some macros to define collision channels to make more readable code
Small PreConstruct refactor in BPScrollbarInventoryView
Fixed several comements throughout the code
Added some CSV logging
Added some console variables for damage logging
Moved door to doorhinge socket instead of manually repositoning it
Added a sword to Cyphina
Fixed Kitty's animation but made her face look weird
Fixed missing parent call in RangedMiku enemy
Ensured ally interaction does not work (as intended)
Deleted summons on new level transition and refactored that blueprint logic
Turned off nativization settings on widgets since it is not supported currently
Fixed some collision console settings around removing warnings about Trigger Profile
Removed inline specifications in UItemManager since they were causing linker errors when building in DebugGame Editor
Added outer object to SetupBulletTargetting()
Changed visualization log type
Cleared selected allies between levels
Fixed ally vision sphere (as part of adding summmoned ally to allies).  Removed use of Ally in blueprints, now we use Summons or Heroes.
Testing out some different data structures in the code in the unit type classes
Refactored ally class moving some logic to summon class
Removed ally from selectedAlly list when they are destroyed
Fixed SetEnable method in Enemy
Show damage number even after enemy dies
Added Icon for "Dying to Eat" Enrage spell effect
DamageModifier in DOT base is now overriden and set explicitly in every spell that scales off health as damage as opposed to set by caller
Somehow reached a state where I intiated an attack as the enemy was destroyed crashing the editor so I added some checks in the initiation logic
Fixed using two buffs with same GameplayCue by moving effects to OnActive function
Added in a custom console command to print our own categories to the CSV profiler
Removed BurntOut debuff and replaced it with ABlaze which has fixed damage logic
Fixed missing settings in IronMaiden spell
Fixed BlackMirrorRitual buffs not resetting due to having a period
Add ability for camera to focus on a unit by double tapping the control group and refactored control group and unit selection logic
Fixed up system that holds default values for enemies and weapons
Huge refactor to names of stats, the accessor functions, and used some new metaprogramming skills to make accessing them uniform
Finally deleted the old sidebar items
Fixed INTERACTABLE positoning when interactable point out of reach
Added 5 control groups
Removed random OnKeyDown event in our Level Transition Widget
Fix this ? UBluEye::TextureUpdate() [C:\MyProject\Plugins\BLUI\Source\Blu\Private\BluEye.cpp:146]
Massive refactor to  health UI system and fixed not being able to select enemies
Upgraded character menu UI with some animations!
Refactored a little code in HudManager
Fixed missing uproperty modifiers on many objects causing them to possibly leak
Fixed some code in multithreaded vision and added missing oncomponent checks for enemy
Fixed incorrect vision settings on unit
Refactored access to some game "global" classes in Unit and its Child classes
Finally fixed the tasks that were making enemy AI fail (mainly due to new visibility system and some corrupt in game unit)
Huge UI refactor which includes dependency injecting HUDManager all over as well as moving a lot of blueprint code to C++ which fixed the memory leak with slots (but introduced a new one with tooltip?)
Rewrote all the slot code in C++
Replaced the old tooltip system for a new one
Fixed issue with not being able to deselect the enemy interface
Added some new cursors
Finally deleted my ActionBar Manager which was obsolete (all that hard work in the past...)
Fixed another threading issue with the vision system (used set.compact() when ally dies)
Fixed being able to click past browser ui
Fixed unlocked quest goals not being marked as unlocked.
Added base class in C++ for browser widgets
Fixted text binding in stats
Another massive refactor done to optimize calls to the browser (moved selection broadcast events out of the setter and onto the actual cases of user interaction leading to selection to prevent having to send so many
Fixed fallback case when navigating to interactables with a interactLocation that is unreachable
updates to the browser)
Fixed problem with being able to rotate the camera using LMB instead of MMB
Another large refactor to the stat system to remove coupling and optimize code by using event driven updates as opposed to constant checking for stat changes
Added in stat graph browser widget
Fixed various missing foward declarations and removed depreciated code with enums and component visualizers
Added asynchronous tasks for some of the longer loop checks
Added a widget that displays all the keyboard controls as part of the ingame widget
Fixed scaling of browser widgets and attribute widget
Couple other changes I forgot to list

TODO: Set enemy unselectable by click trace initially (works when they get out of vision)
TODO: Set interactables unselectable by click trace unless we've overlapped them in the visionSphere once
TODO: Fix Attack Moves and Chasing
TODO: Fix spell casting attempt after another spell finishes (fix with queue system)
TODO: Fix Storage Inventory and Drag and Drop for slots
TODO: Finish Testing Level
TODO: Multiplayer AND LOTSA MULTIPLAYER REFACTORING
TODO: Tank Game 
TODO: Puzzles
TODO: Implement spell description parsing
TODO: Add spell requirements (overloads and combos)
TODO: Implement firebase to record some data?
TODO: Manual enemy debug controls to test some combat cases
