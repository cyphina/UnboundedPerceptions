Weird glitch with move towards actor not working for an interactable that wasn't updated properly.   I supposed something was glitched with the actor since it had two 
two static mesh components, one from before I added the component to the InteractableBase constructor, and creating a new copy with the same properties fixed it.
Fixed WinterBlast not committing when casting while attacking
Removed CastClick event (need to update all spells relying on this).  Instead just casted Avatar and got the targetData.
Fixed glitch with actionbar effects not showing properly due to an optimization where i stored what was shown but never updated it
Changed stop to not reset the currentItem 
Removed range check from casting point targetted spells right next to self
Fix glitch with effect bar not showing effect if it is the second time we get effected by it

Fix moving while spell-casting (at least in AI)
Fixed some hit trace presets
Optimized wall fading a bit but it still needs work
Fix default dialogue
Interact Wardrobe + Dialogue messed up again? - Fixed by changing EDialogSource in trigger to trigger type ... dunno why it wasn't that
Equipment messed up again in main game? - Fixed when deleted intermediate :/
Renamed GetAIController function since it hides the one from the Pawn class
Rewrote several AI tasks
Renamed all the heroes since during refactoring the name field in struct
Removed allies from the allyList (global list of allies if we ever create multiplayer) on destroyed.  Also made sure game was playing when cleaning up in destroyed since destroyed can be called when it is not.
Fixed various settings in EQS system.
Fixed effectbar not showing status effects if it is the second time afflicted by one and optimized it a different way.  

Changed structure of all tasks and hid the looping code.  Tasks look more like callback functions, which should in theory optimize the game a bit, cause less weird errors when the AI moves from task to task, and simplified the code a bit.  
Added a more special gunner AI that swaps between different behaviours depending on RNG (with controllable odds)
Added some new cheats to help tests
Huge refactoring job moving a lot of actions from the model classes to the controller classes even though we don't use true MVC
Added a beginnings listening system task node that allows AI to respond to certain messages that can be sent out by other units.
Modified the fade trace shape and what kinds of walls get traced

TODO:
Let Player choose if queue interrupted by stun
Write a crap ton of functional tests
Further work on the fade system is necessary
Stop cursor from changing in darkness
Add the rest of the things to save data
Make sure AI targeting filters invalid targets (so we don't get a help text popup)
