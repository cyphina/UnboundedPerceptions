{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import { onMount } from 'svelte';\n    import { scaleLinear, scaleBand, scaleOrdinal } from 'd3-scale';\n    import { axisBottom, axisLeft } from 'd3-axis';\n    import { max } from 'd3-array';\n    import { rgb } from 'd3-color';\n    import { transition } from 'd3-transition';\n    import * as d3 from 'd3-selection';\n\n    // values is [baseValue, adjValue]\n    let data = [\n        { statName: 'Strength', values: [10, 20] },\n        { statName: 'Intelligence', values: [12, 28] },\n        { statName: 'Agility', values: [35, 40] },\n        { statName: 'Understanding', values: [17, 31] },\n        { statName: 'Explosiveness', values: [22, 28] },\n        { statName: 'Luck', values: [35, 66] },\n        { statName: 'Strength2', values: [10, 20] },\n        { statName: 'Intelligence2', values: [12, 150] },\n        { statName: 'Agility2', values: [9, 40] },\n        { statName: 'Understanding2', values: [17, 31] },\n        { statName: 'Explosiveness2', values: [22, 28] },\n        { statName: 'Luck2', values: [35, 66] },\n        { statName: 'Wumbo', values: [0, 40] }\n    ];\n\n    // let hero = 'Cyphina Lyena';\n\n    const margin = { top: 15, right: 40, bottom: 0, left: 100 };\n    const width = 600 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const xScale = scaleLinear();\n    const yScale = scaleBand().padding(1);\n\n    const xAxis = axisBottom(xScale);\n    const yAxis = axisLeft(yScale).tickSize(0);\n\n    const colors = ['#968868', '#4287f5'];\n    let svg, graph, xAxisGroup, yAxisGroup;\n\n    // Setup initial functionality\n    onMount(() => {\n        svg = d3\n            .select('.canvas')\n            .attr('class', 'svg')\n            .append('svg')\n            .attr('width', width + margin.left + margin.right)\n            .attr('height', height + margin.top);\n\n        //Container for the gradients\n        var defs = svg.append('defs');\n\n        //SVG Filter for the outside glow (https://apike.ca/prog_svg_filter_feMerge.html)\n        var filter = defs.append('filter').attr('id', 'glow');\n        filter\n            .append('feGaussianBlur')\n            .attr('stdDeviation', '1')\n            .attr('result', 'coloredBlur'); // Result of the blur\n        var feMerge = filter.append('feMerge'); // Sharp origina lelement\n        feMerge.append('feMergeNode').attr('in', 'coloredBlur');\n        feMerge.append('feMergeNode').attr('in', 'SourceGraphic');\n\n        // const title = svg\n        //     .append('text')\n        //     .attr('x', (2 * (margin.left - margin.right) + width) / 2)\n        //     .attr('y', 0 + margin.top * 2)\n        //     .attr('text-anchor', 'middle')\n        //     .style('fill', 'black')\n        //     .style('font-size', '16px')\n        //     .style('text-decoration', 'underline')\n        //     .text(`${hero}'s Stats`);\n\n        graph = svg\n            .append('g')\n            .attr('class', 'graph')\n            .attr('transform', `translate(${margin.left},${-margin.top - 5})`);\n\n        xAxisGroup = graph\n            .append('g')\n            .attr('class', 'xAxis')\n            .attr('transform', `translate(0, ${height})`)\n            .style('opacity', '0');\n        yAxisGroup = graph.append('g').attr('class', 'yAxis');\n\n        xScale.domain([0, max(data, d => Math.max(d.values[0], d.values[1]))]).range([0, width]);\n        yScale.domain(data.map(item => item.statName)).range([0, height]);\n\n        svg.select('.xAxis')\n            .transition()\n            .duration(500)\n            .delay(1000)\n            .style('opacity', '1');\n\n        updateData(data);\n    });\n\n    function updateData(newData) {\n        data = newData;\n\n        xScale.domain([0, max(data, d => Math.max(d.values[0], d.values[1]))]).range([0, width]);\n        yScale.domain(data.map(item => item.statName)).range([0, height]);\n\n        // Add groups for all the pairs of {baseValue,adjValue}\n        const slice = graph\n            .selectAll('.slice')\n            .data(data)\n            .enter()\n            .append('g')\n            .attr('class', 'slice');\n\n        slice.exit().remove();\n\n        // Add for each of our groups, get the rectangles inside the groups and bind them to data\n        const bars = graph\n            .selectAll('.slice')\n            .selectAll('rect')\n            .data(function(d) {\n                return [{ statName: d.statName, value: d.values[0] }, { statName: d.statName, value: d.values[1] }];\n            });\n\n        const text = graph\n            .selectAll('.slice')\n            .selectAll('text')\n            .data(function(d) {\n                return [{ statName: d.statName, value: d.values[0] }, { statName: d.statName, value: d.values[1] }];\n            });\n\n        // Add bar pairs for any new data groups\n        bars.enter()\n            .append('rect')\n            .attr('x', xScale(0))\n            .attr('width', 0)\n            .attr('y', (d, i, n) => yScale(d.statName) - 2.5 + 13 * i)\n            .attr('height', 12)\n            .attr('fill', (d, i, n) => colors[i])\n            // .style('filter', 'url(#glow)') glow effect\n            .style('padding', '3px')\n            .style('margin', '3px')\n\n            .style('stroke-width', '0.5')\n            .style('stroke', rgb(225, 225, 225))\n            .attr('stroke-width', 5)\n            .on('mouseover', function(d, i, n) {\n                d3.select(this).style('fill', rgb(colors[i]).darker(1));\n            })\n            .on('mouseout', function(d, i, n) {\n                d3.select(this).style('fill', colors[i]);\n            })\n            .transition()\n            .duration(1000)\n            .attr('width', d => {\n                return xScale(d.value);\n            });\n\n        text.enter()\n            .append('text')\n            .attr('class', 'bartext')\n            .attr('x', d => {\n                return Math.max(0, xScale(d.value) - d.value.toString().length * 7);\n            })\n            .attr('y', (d, i, n) => yScale(d.statName) + 13 * i + 7.25) // 15 is distance between bars, 6 is bar height\n            .attr('fill', 'black')\n            .attr('text-anchor', 'right')\n            .attr('font-size', '0.7rem')\n            .style('opacity','0')\n            .text(d => {\n                return d.value;\n            })\n            .transition().delay(1000)\n            .style('opacity','1');\n\n        text.exit().remove();\n        bars.exit().remove();\n\n        // Update Current\n        bars.attr('y', (d, i, n) => yScale(d.statName) - 2.5 + 10 * i);\n        bars.transition()\n            .duration(200)\n            .attr('width', d => {\n                return xScale(d.value);\n            });\n\n        text.attr('x', d => {\n            return Math.max(0, xScale(d.value) - d.value.toString().length * 7);\n        })\n            .attr('y', (d, i, n) => yScale(d.statName) - 3.5 + 10 * i + 4.5 + 5)\n            .text(d => {\n                return d.value;\n            });\n\n        // Call this after we create our lines or else these lines will be selected\n        xAxisGroup.call(xAxis);\n        yAxisGroup\n            .call(yAxis)\n            .select('path')\n            .remove();\n\n        yAxisGroup\n            .selectAll('text')\n            .attr('text-anchor', 'right')\n            .attr('transform', `translate(0, 7.5)`);\n    }\n\n    /** Update changes made to a single stat if that stat is on screen */\n    window.updateStat = function(newData) {\n        console.log(data);\n        let i = data.findIndex(item => item.statName == newData.statName);\n        if (i !== -1) {\n            if ('baseValue' in newData) data[i].values[0] = newData.baseValue;\n            if ('adjValue' in newData) data[i].values[1] = newData.adjValue;\n            updateData(data);\n        }\n    };\n\n    /** Called when we are viewing a different hero's stats or we've switched to a different view\n     * like showing only vitals, showing only elemental affinities, etc.\n     */\n    window.updateStatInfo = function(newData) {\n        updateData(newData);\n    };\n</script>\n\n<main>\n    <div class=\"container\">\n        <div class=\"canvas\"></div>\n    </div>\n</main>\n\n<style>\n    main {\n        box-sizing: border-box;\n    }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAsOI,IAAI,cAAC,CAAC,AACF,UAAU,CAAE,UAAU,AAC1B,CAAC"
}