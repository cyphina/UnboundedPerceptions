{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","../../node_modules/svelte/motion/index.mjs","../../src/PlayerIcon.svelte","../../src/Vitalbar.svelte","../../src/PlayerComponent.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value' || descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group) {\n    const value = [];\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.push(group[i].__value);\n    }\n    return value;\n}\nfunction to_number(value) {\n    return value === '' ? undefined : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j];\n                if (attributes[attribute.name]) {\n                    j++;\n                }\n                else {\n                    node.removeAttribute(attribute.name);\n                }\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    if (value != null || input.value) {\n        input.value = value;\n    }\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    const z_index = (parseInt(computed_style.zIndex) || 0) - 1;\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', `display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ` +\n        `overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: ${z_index};`);\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    let unsubscribe;\n    if (is_crossorigin()) {\n        iframe.src = `data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>`;\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        detach(iframe);\n        if (unsubscribe)\n            unsubscribe();\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(html, anchor = null) {\n        this.e = element('div');\n        this.a = anchor;\n        this.u(html);\n    }\n    m(target, anchor = null) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(target, this.n[i], anchor);\n        }\n        this.t = target;\n    }\n    u(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    p(html) {\n        this.d();\n        this.u(html);\n        this.m(this.t, this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error(`Function called outside component initialization`);\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            info.blocks[i] = null;\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next, lookup.has(block.key));\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error(`Cannot have duplicate keys in a keyed each`);\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += \" \" + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += \" \" + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : ``;\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    // onMount happens before the initial afterUpdate\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const prop_values = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, prop_values, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if ($$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set() {\n            // overridden by instance, if it has props\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set() {\n        // overridden by instance, if it has props\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.22.1' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev(\"SvelteDOMRemove\", { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? [\"capture\"] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev(\"SvelteDOMAddEventListener\", { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev(\"SvelteDOMRemoveEventListener\", { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev(\"SvelteDOMRemoveAttribute\", { node, attribute });\n    else\n        dispatch_dev(\"SvelteDOMSetAttribute\", { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev(\"SvelteDOMSetProperty\", { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev(\"SvelteDOMSetDataset\", { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    dispatch_dev(\"SvelteDOMSetData\", { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(`'target' is a required option`);\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn(`Component was already destroyed`); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error(`Infinite loop detected`);\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal';\nexport { get_store_value as get } from '../internal';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe,\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (let i = 0; i < subscribers.length; i += 1) {\n                    const s = subscribers[i];\n                    s[1]();\n                    subscriber_queue.push(s, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { writable } from '../store';\nimport { now, loop, assign } from '../internal';\nimport { linear } from '../easing';\n\nfunction is_date(obj) {\n    return Object.prototype.toString.call(obj) === '[object Date]';\n}\n\nfunction tick_spring(ctx, last_value, current_value, target_value) {\n    if (typeof current_value === 'number' || is_date(current_value)) {\n        // @ts-ignore\n        const delta = target_value - current_value;\n        // @ts-ignore\n        const velocity = (current_value - last_value) / (ctx.dt || 1 / 60); // guard div by 0\n        const spring = ctx.opts.stiffness * delta;\n        const damper = ctx.opts.damping * velocity;\n        const acceleration = (spring - damper) * ctx.inv_mass;\n        const d = (velocity + acceleration) * ctx.dt;\n        if (Math.abs(d) < ctx.opts.precision && Math.abs(delta) < ctx.opts.precision) {\n            return target_value; // settled\n        }\n        else {\n            ctx.settled = false; // signal loop to keep ticking\n            // @ts-ignore\n            return is_date(current_value) ?\n                new Date(current_value.getTime() + d) : current_value + d;\n        }\n    }\n    else if (Array.isArray(current_value)) {\n        // @ts-ignore\n        return current_value.map((_, i) => tick_spring(ctx, last_value[i], current_value[i], target_value[i]));\n    }\n    else if (typeof current_value === 'object') {\n        const next_value = {};\n        for (const k in current_value)\n            // @ts-ignore\n            next_value[k] = tick_spring(ctx, last_value[k], current_value[k], target_value[k]);\n        // @ts-ignore\n        return next_value;\n    }\n    else {\n        throw new Error(`Cannot spring ${typeof current_value} values`);\n    }\n}\nfunction spring(value, opts = {}) {\n    const store = writable(value);\n    const { stiffness = 0.15, damping = 0.8, precision = 0.01 } = opts;\n    let last_time;\n    let task;\n    let current_token;\n    let last_value = value;\n    let target_value = value;\n    let inv_mass = 1;\n    let inv_mass_recovery_rate = 0;\n    let cancel_task = false;\n    function set(new_value, opts = {}) {\n        target_value = new_value;\n        const token = current_token = {};\n        if (value == null || opts.hard || (spring.stiffness >= 1 && spring.damping >= 1)) {\n            cancel_task = true; // cancel any running animation\n            last_time = now();\n            last_value = new_value;\n            store.set(value = target_value);\n            return Promise.resolve();\n        }\n        else if (opts.soft) {\n            const rate = opts.soft === true ? .5 : +opts.soft;\n            inv_mass_recovery_rate = 1 / (rate * 60);\n            inv_mass = 0; // infinite mass, unaffected by spring forces\n        }\n        if (!task) {\n            last_time = now();\n            cancel_task = false;\n            task = loop(now => {\n                if (cancel_task) {\n                    cancel_task = false;\n                    task = null;\n                    return false;\n                }\n                inv_mass = Math.min(inv_mass + inv_mass_recovery_rate, 1);\n                const ctx = {\n                    inv_mass,\n                    opts: spring,\n                    settled: true,\n                    dt: (now - last_time) * 60 / 1000\n                };\n                const next_value = tick_spring(ctx, last_value, value, target_value);\n                last_time = now;\n                last_value = value;\n                store.set(value = next_value);\n                if (ctx.settled)\n                    task = null;\n                return !ctx.settled;\n            });\n        }\n        return new Promise(fulfil => {\n            task.promise.then(() => {\n                if (token === current_token)\n                    fulfil();\n            });\n        });\n    }\n    const spring = {\n        set,\n        update: (fn, opts) => set(fn(target_value, value), opts),\n        subscribe: store.subscribe,\n        stiffness,\n        damping,\n        precision\n    };\n    return spring;\n}\n\nfunction get_interpolator(a, b) {\n    if (a === b || a !== a)\n        return () => a;\n    const type = typeof a;\n    if (type !== typeof b || Array.isArray(a) !== Array.isArray(b)) {\n        throw new Error('Cannot interpolate values of different type');\n    }\n    if (Array.isArray(a)) {\n        const arr = b.map((bi, i) => {\n            return get_interpolator(a[i], bi);\n        });\n        return t => arr.map(fn => fn(t));\n    }\n    if (type === 'object') {\n        if (!a || !b)\n            throw new Error('Object cannot be null');\n        if (is_date(a) && is_date(b)) {\n            a = a.getTime();\n            b = b.getTime();\n            const delta = b - a;\n            return t => new Date(a + t * delta);\n        }\n        const keys = Object.keys(b);\n        const interpolators = {};\n        keys.forEach(key => {\n            interpolators[key] = get_interpolator(a[key], b[key]);\n        });\n        return t => {\n            const result = {};\n            keys.forEach(key => {\n                result[key] = interpolators[key](t);\n            });\n            return result;\n        };\n    }\n    if (type === 'number') {\n        const delta = b - a;\n        return t => a + t * delta;\n    }\n    throw new Error(`Cannot interpolate ${type} values`);\n}\nfunction tweened(value, defaults = {}) {\n    const store = writable(value);\n    let task;\n    let target_value = value;\n    function set(new_value, opts) {\n        if (value == null) {\n            store.set(value = new_value);\n            return Promise.resolve();\n        }\n        target_value = new_value;\n        let previous_task = task;\n        let started = false;\n        let { delay = 0, duration = 400, easing = linear, interpolate = get_interpolator } = assign(assign({}, defaults), opts);\n        if (duration === 0) {\n            store.set(target_value);\n            return Promise.resolve();\n        }\n        const start = now() + delay;\n        let fn;\n        task = loop(now => {\n            if (now < start)\n                return true;\n            if (!started) {\n                fn = interpolate(value, new_value);\n                if (typeof duration === 'function')\n                    duration = duration(value, new_value);\n                started = true;\n            }\n            if (previous_task) {\n                previous_task.abort();\n                previous_task = null;\n            }\n            const elapsed = now - start;\n            if (elapsed > duration) {\n                store.set(value = new_value);\n                return false;\n            }\n            // @ts-ignore\n            store.set(value = fn(easing(elapsed / duration)));\n            return true;\n        });\n        return task.promise;\n    }\n    return {\n        set,\n        update: (fn, opts) => set(fn(target_value, value), opts),\n        subscribe: store.subscribe\n    };\n}\n\nexport { spring, tweened };\n","<script>\r\n    import { createEventDispatcher } from 'svelte';\r\n\r\n    let dispatch = createEventDispatcher();\r\n\r\n    export let name; // Used to get filepath to image\r\n    export let bSelected;\r\n    export let size = 80;\r\n    const imgFolder = './images/';\r\n    $: imgPath = imgFolder + name + '.png';\r\n\r\n    const handleSelect = e => {\r\n        dispatch('select', e);\r\n    };\r\n</script>\r\n\r\n<div class=\"wrapper\" class:bSelected>\r\n    <div class=\"icon\" class:bSelected on:click=\"{e => handleSelect(e)}\" style=\"width: {size}px; height: {size}px\">\r\n        <img src=\"{imgPath}\" alt=\"Missing Player Icon!\" />\r\n    </div>\r\n</div>\r\n\r\n<style>\r\n    img {\r\n        height: 100%;\r\n        width: 100%;\r\n        object-fit: contain;\r\n    }\r\n    .wrapper {\r\n        padding: 0px;\r\n    }\r\n    .wrapper.bSelected {\r\n        padding: 0;\r\n    }\r\n    .icon {\r\n        border-radius: 50%;\r\n        border: 2px solid;\r\n        border-color: black;\r\n        box-shadow: 0px 0px 12px rgba(123, 104, 238, 0.7);\r\n        overflow: hidden;\r\n        margin: 0 0 0 0.5em;\r\n    }\r\n    .icon:hover {\r\n        box-shadow: 0px 0px 12px rgba(87, 4, 104, 0.904);\r\n    }\r\n    .icon.bSelected {\r\n        margin: 10;\r\n    }\r\n</style>\r\n","<script>\r\n    export let vital;\r\n    export let maxVital;\r\n    export let color;\r\n\r\n    $: percentVital = maxVital > 0 ? Math.floor((100 * vital) / maxVital) : 0;\r\n</script>\r\n\r\n<div class=\"progressbar\" >\r\n    <div class=\"bar {color}\" style=\"width: {percentVital}%\"></div>\r\n</div>\r\n\r\n<style>\r\n    .progressbar {\r\n        position: relative;\r\n        margin: 5px 0 0 0;\r\n        width: 100%;\r\n        height: 5px;\r\n        background: #e1e1e1;\r\n        border-radius: 2px;\r\n        overflow: hidden;\r\n        box-shadow: 0px 0px 12px rgba(123, 104, 238, 0.7);\r\n    }\r\n    .progressbar .bar {\r\n        height: 100%;\r\n        background: #212121;\r\n    }\r\n    .bar.blue {\r\n        background: #00a8c5;\r\n    }\r\n    .bar.red {\r\n        background: #be5869;\r\n    }\r\n</style>\r\n","<script>\r\n    import { createEventDispatcher } from 'svelte';\r\n    import { tweened } from 'svelte/motion';\r\n    import { scale } from 'svelte/transition';\r\n    import { quintOut } from 'svelte/easing';\r\n    import PlayerIcon from './PlayerIcon.svelte';\r\n    import Vitalbar from './Vitalbar.svelte';\r\n\r\n    let dispatch = createEventDispatcher();\r\n\r\n    export let index;\r\n    export let name;\r\n    export let hitpoints;\r\n    export let maxHitpoints;\r\n    export let mana;\r\n    export let maxMana;\r\n    export let bSelected;\r\n\r\n    const store = tweened(0, { duration: 200 });\r\n    $: store.set(bSelected ? 100 : 75);\r\n\r\n    const handleSelect = e => {\r\n        dispatch('select', index);\r\n    };\r\n</script>\r\n\r\n<div class=\"player\" class:selected=\"{bSelected}\">\r\n    <PlayerIcon {name} {bSelected} on:select=\"{e => handleSelect(e)}\" size=\"{$store}\" />\r\n    <div class=\"info\">\r\n        {#if bSelected}\r\n            <div class=\"name\">\r\n                <span>{name}</span>\r\n            </div>\r\n        {/if}\r\n        <div class=\"hitpoints\" class:selected=\"{bSelected}\">\r\n            {#if bSelected}\r\n                <span>{hitpoints}/{maxHitpoints}</span>\r\n            {/if}\r\n\r\n            <Vitalbar vital=\"{hitpoints}\" maxVital=\"{maxHitpoints}\" color=\"red\" />\r\n        </div>\r\n        <div class=\"mana\" class:selected=\"{bSelected}\">\r\n            {#if bSelected}\r\n                <span>{mana}/{maxMana}</span>\r\n            {/if}\r\n            <Vitalbar vital=\"{mana}\" maxVital=\"{maxMana}\" color=\"blue\" />\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<style>\r\n    .player {\r\n        color: #ffffff;\r\n        width: 100%;\r\n        margin: 0 0 0.5em 0;\r\n        display: block;\r\n        justify-content: space-between;\r\n        box-sizing: border-box;\r\n    }\r\n    .player.selected {\r\n        display: flex;\r\n    }\r\n    .info {\r\n        margin: 0.6em;\r\n        height: 100%;\r\n        flex: 1;\r\n        user-select: none;\r\n        font-family: 'Comic Sans MS', cursive;\r\n        font-size: 1em;\r\n    }\r\n\r\n    .hitpoints {\r\n        width: 75px;\r\n    }\r\n    .hitpoints.selected {\r\n        width: 100px;\r\n    }\r\n    .mana {\r\n        width: 75px;\r\n    }\r\n    .mana.selected {\r\n        width: 100px;\r\n    }\r\n</style>\r\n","<script>\n    import PlayerComponent from './PlayerComponent.svelte';\n    // Name will also be used to locate icon\n\n    let selectedIndex = -1;\n    let bShiftKeyDown = false;\n\n    let heroes = [\n        // {\n        //     name: 'Cyphina',\n        //     hitpoints: 100,\n        //     maxHitpoints: 100,\n        //     mana: 100,\n        //     maxMana: 100,\n        //     bSelected: false,\n        // },\n        // {\n        //     name: 'Kitty',\n        //     hitpoints: 100,\n        //     maxHitpoints: 100,\n        //     mana: 100,\n        //     maxMana: 100,\n        //     bSelected: false,\n        // },\n        // {\n        //     name: 'Emelyene',\n        //     hitpoints: 100,\n        //     maxHitpoints: 100,\n        //     mana: 100,\n        //     maxMana: 100,\n        //     bSelected: false,\n        // },\n        // {\n        //     name: 'Sylphia',\n        //     hitpoints: 100,\n        //     maxHitpoints: 100,\n        //     mana: 100,\n        //     maxMana: 100,\n        //     bSelected: false,\n        // },\n    ];\n\n    const handleSelect = e => {\n        let newSelectedIndex = e.detail;\n        if (!bShiftKeyDown) {\n            for (let i = 0; i < heroes.length; ++i) {\n                heroes[i].bSelected = false;\n            }\n        }\n        heroes[newSelectedIndex].bSelected = bShiftKeyDown ? !heroes[newSelectedIndex].bSelected : true;\n        blu_event('selectHero', '{\"value\":' + newSelectedIndex + '}');\n        heroes = heroes;\n    };\n\n    const handleKeyDown = e => {\n        if (e.key == 'Shift') bShiftKeyDown = true;\n    };\n\n    const handleKeyUp = e => {\n        if (e.key == 'Shift') bShiftKeyDown = false;\n    };\n\n    // Update all the heroes when replacing a party\n    window.updatePartyInfo = function(newData) {\n        heroes = newData;\n    };\n\n    // Update a hero by passing an object with an index (heroIndex) and new values (updatedHeroData)\n    window.updateHeroInfo = function(newData) {\n        const key = 'heroIndex' in newData ? newData.heroIndex : newData.name; // If there is no property heroIndex, we'll search by name\n        console.log(key);\n        if (isNaN(key)) {\n            let index = heroes.findIndex(hero => hero.name === key);\n            heroes[index] = { ...heroes[index], ...newData };\n        } else {\n            heroes[key] = { ...heroes[key], ...newData };\n        }\n    };\n\n    window.updateDeselectAllHeroes = function(newData) {\n        heroes.forEach(hero => (hero.bSelected = false));\n        heroes = heroes;\n    };\n\n    window.updateHeroToggleDeselect = function(newData) {\n        if ('name' in newData) {\n            let index = heroes.findIndex(hero => hero.name === newData.name);\n            heroes[index].bSelected = false;\n        }\n    };\n\n    window.updateSingleHeroSelect = function(newData) {\n        if ('name' in newData) {\n            let index = heroes.findIndex(hero => hero.name === newData.name);\n            heroes.forEach(hero => (hero.bSelected = false));\n            heroes[index].bSelected = true;\n        }\n    };\n\n    window.updateSingleHeroToggleSelect = function(newData) {\n        if ('name' in newData) {\n            let index = heroes.findIndex(hero => hero.name === newData.name);\n            heroes[index].bSelected = true;\n        }\n    };\n\n    window.updateHeroHealthInfo = function(newData) {\n        if ('name' in newData) {\n            let index = heroes.findIndex(hero => hero.name === newData.name);\n            heroes[index].hitpoints = newData.hitpoints;\n        }\n    };\n\n    window.updateHeroManaInfo = function(newData) {\n        if ('name' in newData) {\n            let index = heroes.findIndex(hero => hero.name === newData.name);\n            heroes[index].mana = newData.mana;\n        }\n    };\n\n    window.updateHeroMaxHealthInfo = function(newData) {\n        if ('name' in newData) {\n            let index = heroes.findIndex(hero => hero.name === newData.name);\n            heroes[index].maxHitpoints = newData.maxHitpoints;\n        }\n    };\n\n    window.updateHeroMaxManaInfo = function(newData) {\n        if ('name' in newData) {\n            let index = heroes.findIndex(hero => hero.name === newData.name);\n            heroes[index].maxMana = newData.maxMana;\n        }\n    };\n</script>\n\n<svelte:window on:keydown=\"{handleKeyDown}\" on:keyup=\"{handleKeyUp}\" />\n\n<main>\n    <div class=\"heroContainer\">\n        {#each heroes as hero, index}\n            <PlayerComponent {...hero} {index} on:select=\"{e => handleSelect(e)}\" />\n        {/each}\n    </div>\n</main>\n\n<style>\n    main {\n        box-sizing: border-box;\n    }\n\n    .heroContainer {\n        height: 100%;\n        width: 100%;\n        box-sizing: border-box;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n    }\n</style>\n","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n});\n\nexport default app;"],"names":["noop","identity","x","assign","tar","src","k","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","component_subscribe","component","store","callback","$$","on_destroy","push","callbacks","unsub","subscribe","unsubscribe","is_client","window","now","performance","Date","raf","cb","requestAnimationFrame","tasks","Set","run_tasks","task","c","delete","f","size","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","set_style","key","important","style","setProperty","toggle_class","toggle","classList","current_component","set_current_component","createEventDispatcher","Error","get_current_component","type","detail","e","createEvent","initCustomEvent","custom_event","slice","call","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","flushing","seen_callbacks","flush","i","length","update","pop","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","transition_in","block","local","transition_out","o","d","globals","globalThis","global","create_component","mount_component","on_mount","m","new_on_destroy","map","filter","destroy_component","detaching","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","parent_component","prop_values","bound","context","Map","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","[object Object]","this","$destroy","index","indexOf","splice","subscriber_queue","is_date","obj","prototype","toString","get_interpolator","isArray","arr","bi","t","getTime","delta","keys","interpolators","result","tweened","defaults","start","stop","subscribers","set","new_value","run_queue","s","invalidate","subscriber","writable","target_value","opts","previous_task","started","delay","duration","easing","linear","interpolate","promise","fulfill","loop","abort","elapsed","dispatch","bSelected","handleSelect","imgPath","vital","maxVital","color","percentVital","Math","floor","hitpoints","maxHitpoints","mana","maxMana","levels","updates","to_null_out","accounted_for","$$scope","n","undefined","spread_props","r","iterations","bShiftKeyDown","heroes","newSelectedIndex","blu_event","updatePartyInfo","newData","updateHeroInfo","heroIndex","console","log","isNaN","findIndex","hero","updateDeselectAllHeroes","updateHeroToggleDeselect","updateSingleHeroSelect","updateSingleHeroToggleSelect","updateHeroHealthInfo","updateHeroManaInfo","updateHeroMaxHealthInfo","updateHeroMaxManaInfo","body"],"mappings":"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"}